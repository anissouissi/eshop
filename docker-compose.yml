services:
  gateway:
    build:
      context: .
      dockerfile: ./apps/api/gateway/Dockerfile
      target: development
    command: npm start api-gateway
    env_file:
      - ./apps/api/gateway/.env
    depends_on:
      identity:
        condition: service_healthy
      catalog:
        condition: service_healthy
      basket:
        condition: service_healthy
      ordering:
        condition: service_healthy
      mongodb-primary:
        condition: service_healthy
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'

  identity:
    build:
      context: .
      dockerfile: ./apps/api/identity/Dockerfile
      target: development
    command: npm start api-identity
    env_file:
      - ./apps/api/identity/.env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://identity:3001/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3001:3001'

  catalog:
    build:
      context: .
      dockerfile: ./apps/api/catalog/Dockerfile
      target: development
    command: npm start api-catalog
    env_file:
      - ./apps/api/catalog/.env
    depends_on:
      mongodb-primary:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://catalog:3002/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3002:3002'

  basket:
    build:
      context: .
      dockerfile: ./apps/api/basket/Dockerfile
      target: development
    command: npm start api-basket
    env_file:
      - ./apps/api/basket/.env
    depends_on:
      mongodb-primary:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://basket:3003/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3003:3003'

  ordering:
    build:
      context: .
      dockerfile: ./apps/api/ordering/Dockerfile
      target: development
    command: npm start api-ordering
    env_file:
      - ./apps/api/ordering/.env
    depends_on:
      mongodb-primary:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://ordering:3004/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3004:3004'

  postgres:
    image: postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      PGUSER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  rabbitmq:
    image: 'rabbitmq:3-management'
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - 'rabbitmq_data:/data'
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  mongodb-primary:
    image: docker.io/bitnami/mongodb:7.0
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    volumes:
      - 'mongodb_master_data:/bitnami/mongodb'
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  mongodb-secondary:
    image: docker.io/bitnami/mongodb:7.0
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123

  mongodb-arbiter:
    image: docker.io/bitnami/mongodb:7.0
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123

volumes:
  postgres-data:
    driver: local
  mongodb_master_data:
    driver: local
  rabbitmq_data:
    driver: local
